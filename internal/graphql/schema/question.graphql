enum Answer {
  a
  b
  c
  d
}

type Question {
  id: ID!
  from: String
  content: String!
  explanation: String
  correctAnswer: Answer!
  image: String
  answerA: String
  answerAImage: String
  answerB: String
  answerBImage: String
  answerC: String
  answerCImage: String
  answerD: String
  answerDImage: String
  qualification: Qualification @goField(forceResolver: true)
  createdAt: Time!
  updatedAt: Time!
}

type QuestionList {
  total: Int!
  items: [Question!]
}

input QuestionInput {
  content: String
  from: String
  explanation: String
  correctAnswer: Answer
  qualificationID: Int
  image: Upload
  deleteImage: Boolean
  answerA: String
  answerAImage: Upload
  deleteAnswerAImage: Boolean
  answerB: String
  answerBImage: Upload
  deleteAnswerBImage: Boolean
  answerC: String
  answerCImage: Upload
  deleteAnswerCImage: Boolean
  answerD: String
  answerDImage: Upload
  deleteAnswerDImage: Boolean
}

input QuestionFilter {
  id: [ID!]
  idNEQ: [ID!]

  from: [String!]

  contentIEQ: String
  contentMATCH: String

  qualificationID: [Int!]
  qualificationIDNEQ: [Int!]
  qualificationFilter: QualificationFilter

  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
}

extend type Query {
  questions(
    filter: QuestionFilter
    limit: Int
    offset: Int
    sort: [String!]
  ): QuestionList! @authenticated(yes: true) @hasRole(role: admin)
  generateTest(qualificationIDs: [ID!]!, limit: Int): [Question!]
}

extend type Mutation {
  createQuestion(input: QuestionInput!): Question
    @authenticated(yes: true)
    @hasRole(role: admin)
  updateQuestion(id: ID!, input: QuestionInput!): Question
    @authenticated(yes: true)
    @hasRole(role: admin)
  deleteQuestions(ids: [ID!]!): [Question!]
    @authenticated(yes: true)
    @hasRole(role: admin)
}
