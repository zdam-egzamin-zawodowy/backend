enum Role {
  admin
  user
}

type User {
  id: ID!
  displayName: String!
  role: Role!
  email: String!
  activated: Boolean!
  createdAt: Time!
}

type UserList {
  total: Int!
  items: [User!]
}

input UserInput {
  displayName: String
  password: String
  email: String
  role: Role
  activated: Boolean
}

input UpdateManyUsersInput {
  role: Role
  activated: Boolean
}

input UserFilterOr {
  displayNameIEQ: String
  displayNameMATCH: String

  emailIEQ: String
  emailMATCH: String
}

input UserFilter {
  id: [ID!]
  idNEQ: [ID!]

  activated: Boolean

  displayName: [String!]
  displayNameNEQ: [String!]
  displayNameIEQ: String
  displayNameMATCH: String

  email: [String!]
  emailNEQ: [String!]
  emailIEQ: String
  emailMATCH: String

  role: [Role!]
  roleNEQ: [Role!]

  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time

  or: UserFilterOr
}

type UserWithToken {
  token: String!
  user: User!
}

extend type Query {
  users(
    filter: UserFilter
    limit: Int
    offset: Int
    sort: [String!]
  ): UserList! @authenticated(yes: true) @hasRole(role: Admin)
  user(id: ID!): User @authenticated(yes: true) @hasRole(role: Admin)
  me: User
}

extend type Mutation {
  createUser(input: UserInput!): User
    @authenticated(yes: true)
    @hasRole(role: admin)
  updateUser(id: ID!, input: UserInput!): User
    @authenticated(yes: true)
    @hasRole(role: admin)
  updateManyUsers(ids: [ID!]!, input: UpdateManyUsersInput!): [User!]
    @authenticated(yes: true)
    @hasRole(role: admin)
  deleteUsers(ids: [ID!]!): [User!]
    @authenticated(yes: true)
    @hasRole(role: admin)
  signIn(
    email: String!
    password: String!
    staySignedIn: Boolean
  ): UserWithToken @authenticated(yes: false)
}
